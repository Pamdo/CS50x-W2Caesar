char *infile = argv[2];
char *outfile = argv[3];
float f = atof(argv[1]);

// open input file
FILE *inptr = fopen(infile, "r");
if (inptr == NULL)
{
    fprintf(stderr, "Could not open %s.\n", infile);
    return 2;
}

// open output file
FILE *outptr = fopen(outfile, "w");
if (outptr == NULL)
{
    fclose(inptr);
    fprintf(stderr, "Could not create %s.\n", outfile);
    return 3;
}

// read infile's BITMAPFILEHEADER
BITMAPFILEHEADER bf;
fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

// read infile's BITMAPINFOHEADER
BITMAPINFOHEADER bi;
fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

int old_padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4; //padding of original (before multiplying by factor f)
bi.biWidth = bi.biWidth * f; //change width by factor f
bi.biHeight = bi.biHeight * f; //change height by factor f
int new_padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4; //calculate new padding after mult width by f
bi.biSizeImage = ((sizeof(RGBTRIPLE) * bi.biWidth) + new_padding) * abs(bi.biHeight); //calculate new image size
bf.bfSize = bi.biSizeImage + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER); //calculate new file size

// ensure infile is (likely) a 24-bit uncompressed BMP 4.0
if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
    bi.biBitCount != 24 || bi.biCompression != 0)
{
    fclose(outptr);
    fclose(inptr);
    fprintf(stderr, "Unsupported file format.\n");
    return 4;
}

// write outfile's BITMAPFILEHEADER
fwrite(&bf, sizeof(BITMAPFILEHEADER), 1, outptr);

// write outfile's BITMAPINFOHEADER
fwrite(&bi, sizeof(BITMAPINFOHEADER), 1, outptr);


// iterate over infile's scanlines
for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
{
    // iterate over pixels in scanline
    for (int j = 0; j < bi.biWidth; j++)
    {
        // temporary storage
        RGBTRIPLE triple;

        // read RGB triple from infile
        fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

        // write RGB triple to outfile
        // Write each pixle f number of times to scale up image size
        for (int x = 0; x < f; x++)
        {
        fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
        }

    }
    // Must add f amount of the same row as in the last loop, starting at p = 1 becase
    // we already added the first row in the above loop
    for (int p = 1; p < f; p++)
        {
            fseek(inptr, -(bi.biWidth * sizeof(RGBTRIPLE)), SEEK_CUR); //print you infile pointer back to the beginnning of the previous scanline to read/write the same line again
            for (int t = 0; t < new_padding; t++) //add padding to the previous scanline before starting another
                    fputc(0x00, outptr);
                }
            for (int l = 0; l < bi.biWidth; l++)
                {
                    // temporary storage
                    RGBTRIPLE triple;

                    // read RGB triple from infile
                    fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

                    // write RGB triple to outfile
                    for (int x = 0; x < f; x++)
                        {
                            fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
                        }
                }
            i++; //iterate because another scanline has been written
        }


    // skip over padding, if any. Ready to read the next scanline in the infile
    fseek(inptr, old_padding, SEEK_CUR);

    //add padding to the previous scanline before starting the next
    for (int k = 0; k < new_padding; k++)
    {
        fputc(0x00, outptr);
    }
}

// close infile
fclose(inptr);

// close outfile
fclose(outptr);

// success
return 0;
